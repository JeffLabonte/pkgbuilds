pkgname=python-gitpython
_name=GitPython
pkgver=3.0.7
pkgrel=1
pkgdesc="A python library used to interact with Git repositories"
arch=('any')
url="https://github.com/gitpython-developers/gitpython"
license=('BSD')
depends=('git' 'python-gitdb')
makedepends=('python-setuptools')
checkdepends=('python-ddt' 'python-nose')
source=("https://pypi.org/packages/source/${_name:0:1}/$_name/$_name-$pkgver.tar.gz"{,.asc})
sha256sums=('99cd0403cecd8a13b95d2e045b9fcaa7837137fcc5ec3105f2c413305d82c143'
            'SKIP')
validpgpkeys=('2CF6E0B51AAF73F09B1C21174D1DA68C88710E60')
              # Sebastian Thiel (In Rust I trust!) <byronimo@gmail.com>

build() {
	cd "${_name}-${pkgver}"
	python setup.py build
}

check() {
	cd "${_name}-${pkgver}"
	local TEST_TMPDIR=$(mktemp -d -t gitpython.XXX)
	local GITDB_TMPDIR=$(mktemp -d -t gitdb.XXX)
	local SMMAP_TMPDIR=$(mktemp -d -t smmap.XXX)
	git config --global user.name "Test User"
	git config --global user.email "test@user.org"
	(
		cd "$SMMAP_TMPDIR"
		mkdir -vp bare
		(
			cd bare
			git init --bare
		)
		git clone bare clone
		cd clone
		for commit in {1..50}; do
			touch "file${commit}"
			git add "file${commit}"
			git commit -m "file${commit}"
		done
		git push
	)
	(
		cd "$GITDB_TMPDIR"
		mkdir -vp bare
		(
			cd bare
			git init --bare
		)
		git clone bare clone
		cd clone

		mkdir -vp gitdb/ext
		git submodule add --name 'smmap' "${SMMAP_TMPDIR}/clone" gitdb/ext/smmap
		git submodule init gitdb/ext/smmap
		git add gitdb/ext/smmap
		git commit -m "Adding smmap submodule"

		for commit in {1..50}; do
			touch "file${commit}"
			git add "file${commit}"
			git commit -m "file${commit}"
		done
		git push
	)
	(
		cd "$TEST_TMPDIR"
		mkdir -vp bare
		(
			cd bare
			git init --bare
		)
		git clone bare clone
		cd clone

		mkdir -vp git/ext
		git submodule add --name 'gitdb' "${GITDB_TMPDIR}/clone" git/ext/gitdb
		git submodule update --init --recursive git/ext/gitdb
		git add git/ext/gitdb
		git commit -m "Adding gitdb submodule"

		# test hardcodes this file to test against
		touch AUTHORS
		git add AUTHORS
		git commit -m "Adding AUTHORS."
		# test hardcodes this file to test against
		touch MANIFEST.in
		git add MANIFEST.in
		git commit -m "Adding MANIFEST.in."

		for commit in {1..50}; do
			touch "file${commit}"
			git add "file${commit}"
			git commit -m "file${commit}"
		done
		git tag -am '0.1.4' 0.1.4
		for commit in {51..100}; do
			touch "file${commit}"
			git add "file${commit}"
			git commit -m "file${commit}"
		done
		git tag -am '0.1.5' 0.1.5
		for commit in {101..150}; do
			touch "file${commit}"
			git add "file${commit}"
			git commit -m "file${commit}"
		done
		git tag -am '0.1.6' 0.1.6
		for commit in {151..160}; do
			touch "file${commit}"
			git add "file${commit}"
			git commit -m "file${commit}"
		done
		git tag -am '0.3.5' 0.3.5

		git tag __testing_point__
		git push
		git push --tags
	)
	export GIT_PYTHON_TEST_GIT_REPO_BASE="${TEST_TMPDIR}/clone/.git"
	nosetests -vd || echo "Test suite relies on checked out repository https://github.com/gitpython-developers/GitPython/issues/914"
}

package() {
	cd "${_name}-${pkgver}"
	python setup.py install --skip-build \
		--optimize=1 \
		--prefix=/usr \
		--root="${pkgdir}"
	install -vDm 644 {AUTHORS,CHANGES,{CONTRIBUTING,README}.md} \
		-t "${pkgdir}/usr/share/doc/${pkgname}"
	install -vDm 644 LICENSE -t "${pkgdir}/usr/share/licenses/${pkgname}/"
}
